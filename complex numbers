#include <iostream>
using namespace std;

class Complex {
private:
    double real, imag;  

public:
    Complex(double r = 0, double i = 0) {
        real = r;
        imag = i;
    }

    Complex operator+(const Complex& obj) {
        return Complex(real + obj.real, imag + obj.imag);
    }

    Complex operator-(const Complex& obj) {
        return Complex(real - obj.real, imag - obj.imag);
    }

    Complex operator*(const Complex& obj) {
        double r = (real * obj.real) - (imag * obj.imag);
        double i = (real * obj.imag) + (imag * obj.real);
        return Complex(r, i);
    }

    Complex operator/(const Complex& obj) {
        double denominator = obj.real * obj.real + obj.imag * obj.imag;
        if (denominator == 0) {
            cout << "Error! Division by zero." << endl;
            return Complex(0, 0);
        }
        double r = ((real * obj.real) + (imag * obj.imag)) / denominator;
        double i = ((imag * obj.real) - (real * obj.imag)) / denominator;
        return Complex(r, i);
    }

    void display() {
        if (imag >= 0)
            cout << real << " + " << imag << "i" << endl;
        else
            cout << real << " - " << -imag << "i" << endl;
    }
};

int main() {
    Complex c1(4, 5), c2(2, 3), result;

    result = c1 + c2;
    cout << "Addition: ";
    result.display();

    result = c1 - c2;
    cout << "Subtraction: ";
    result.display();

    result = c1 * c2;
    cout << "Multiplication: ";
    result.display();

    result = c1 / c2;
    cout << "Division: ";
    result.display();

    return 0;
}
